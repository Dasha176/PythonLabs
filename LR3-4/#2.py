#  Задача 2. Наследование:
# Создать класс Human. При создании экземпляра класса ему должны
# передаться в формате строки обязательные параметры: фамилия, имя,
# отчество. Также класс должен получить необязательные параметры возраст и
# пол.
# Возраст по умолчанию равен нулю. Пол указывается строкой «М» или
# «Ж», значение по умолчанию любое из 2х вариантов.
# В классе Human реализовать 2 метода:
# 1) get_fio – возвращает строку в формате «Фамилия И. О.»
# 2) get_full_info – возвращает строку в формате:
# Фамилия: {…}
# Имя: {…}
# Отчество: {…}
# Пол: {…}
# Возраст: {…}
# - где {…} соответствующее значение атрибута объекта. Переносы строк
# – обязательны.
# Создать класс Student, который наследуется от класса Human.
# Переопределить в данном классе метод __init__ таким образом, чтобы он
# принимал обязательный параметр номера группы в формате строки.
# Переопределить метод get_full_info таким образом, чтобы к выводу
# добавилась строка «Группа: {…}».
# Дополнительно:
# Использование super – обязательно.
# Метод get_full_info для student должен предусматривать возможность
# возврата строки, где вместо переноса строк используется запятая.

class Human:
    def __init__(self, фамилия, имя, отчество, возраст='0', пол='Ж'):
        self.фамилия = фамилия
        self.имя = имя
        self.отчество = отчество
        self.возраст = возраст
        self.пол = пол

    def get_fio(self):
        return self.фамилия+' '+self.имя[0]+'. '+self.отчество[0] +'. '

    def get_full_info(self):
        return f'Фамилия: {self.фамилия}\nИмя: {self.имя}\nОтчество: {self.отчество}\nПол: {self.пол}\nВозраст: {self.возраст}'


class Student(Human):

    def __init__(self, фамилия, имя, отчество, группа, возраст='0', пол='Ж'):
        super().__init__(фамилия, имя, отчество, возраст, пол)
        self.группа = группа

    def get_full_info(self):
        result = super().get_full_info()+f'\nГруппа: {self.группа}'
        return ', '.join(result.split('\n'))


human = Human('Иванова', 'Марья', 'Николаевна', '36')
print(human.get_fio())
print(human.get_full_info())

student = Student('Опарин', 'Пётр', 'Сергеевич', 'ПГСТ', '22', 'М')
print(student.get_full_info())